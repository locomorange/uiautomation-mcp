name: Release and Publish to Winget

on:
  push:
    tags:
      - 'v*.*.*'  # v1.0.0 ÂΩ¢Âºè„ÅÆ„Çø„Ç∞„Åß„Éà„É™„Ç¨„Éº
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

env:
  DOTNET_VERSION: '9.0.x'
  
jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
      actions: read
    strategy:
      matrix:
        architecture: [win-x64, win-arm64]
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Get version from tag or input
      id: version
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "${{ github.ref_name }}" -replace '^v', ''
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
      shell: pwsh
      
    - name: Update version in project files
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $files = @(
          "UIAutomationMCP.Server/UIAutomationMCP.Server.csproj",
          "UIAutomationMCP.Core/UIAutomationMCP.Core.csproj", 
          "UIAutomationMCP.Models/UIAutomationMCP.Models.csproj"
        )
        foreach ($file in $files) {
          if (Test-Path $file) {
            (Get-Content $file) -replace '<Version>.*</Version>', "<Version>$version</Version>" | Set-Content $file
            (Get-Content $file) -replace '<AssemblyVersion>.*</AssemblyVersion>', "<AssemblyVersion>$version</AssemblyVersion>" | Set-Content $file
            (Get-Content $file) -replace '<FileVersion>.*</FileVersion>', "<FileVersion>$version</FileVersion>" | Set-Content $file
          }
        }
      shell: pwsh
      
    - name: Run tests
      run: dotnet test --configuration Release --logger trx --results-directory TestResults
      
    - name: Build with Hybrid Native AOT
      run: |
        $runtime = "${{ matrix.architecture }}"
        powershell -ExecutionPolicy Bypass -File publish-aot.ps1 -CleanFirst -Runtime $runtime
      shell: pwsh
      
    - name: Create release archive
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $runtime = "${{ matrix.architecture }}"
        $archiveName = "UIAutomationMCP-v$version-$runtime.zip"
        $publishPath = "publish/aot-$runtime"
        Compress-Archive -Path "$publishPath/*" -DestinationPath $archiveName
        echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_OUTPUT
        echo "ARCHIVE_PATH=$(Get-Location)/$archiveName" >> $env:GITHUB_OUTPUT
        echo "RUNTIME=$runtime" >> $env:GITHUB_OUTPUT
      id: archive
      shell: pwsh
      
    - name: Calculate file hashes
      id: hashes
      run: |
        $archivePath = "${{ steps.archive.outputs.ARCHIVE_PATH }}"
        $sha256 = (Get-FileHash -Path $archivePath -Algorithm SHA256).Hash
        $fileSize = (Get-Item $archivePath).Length
        echo "SHA256=$sha256" >> $env:GITHUB_OUTPUT
        echo "SIZE=$fileSize" >> $env:GITHUB_OUTPUT
        echo "SHA256: $sha256"
        echo "Size: $fileSize bytes"
      shell: pwsh
      
    - name: Generate release notes
      id: release_notes
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $size = [math]::Round(${{ steps.hashes.outputs.SIZE }} / 1MB, 2)
        
        $notes = @"
        ## UIAutomationMCP v$version
        
        ### üöÄ Features
        - Native AOT optimized MCP Server (ultra-fast startup)
        - Shared runtime architecture for efficient deployment
        - Full UI Automation support for Windows applications
        
        ### üìä Performance
        - **Startup Time**: ~400ms (90%+ faster than traditional .NET)
        - **Package Size**: ${size}MB
        - **Memory Usage**: Optimized for minimal footprint
        
        ### üõ†Ô∏è Installation
        
        #### Via Winget (Recommended)
        ``````
        winget install Locomorange.UIAutomationMCP
        ``````
        
        #### Manual Installation
        1. Download and extract the ZIP file
        2. Ensure .NET 9.0 Desktop Runtime is installed
        3. Run UIAutomationMCP.exe from the Server folder
        
        ### üìã Requirements
        - Windows 10/11 (x64)
        - .NET 9.0 Desktop Runtime (automatically installed via winget)
        
        ### üîß Architecture
        - **Server**: Native AOT compiled (15.96MB)
        - **Worker**: Framework-dependent (4.67MB) 
        - **Monitor**: Framework-dependent (4.6MB)
        - **Runtime**: Shared .NET runtime (169.86MB)
        
        ### üìÅ Package Contents
        ``````
        UIAutomationMCP/
        ‚îú‚îÄ‚îÄ Server/           # Native AOT MCP Server
        ‚îú‚îÄ‚îÄ Worker/           # UI Automation Worker Process  
        ‚îú‚îÄ‚îÄ Monitor/          # Event Monitoring Process
        ‚îî‚îÄ‚îÄ Runtime/          # Shared .NET 9.0 Runtime
        ``````
        "@
        
        echo "NOTES<<EOF" >> $env:GITHUB_OUTPUT
        echo $notes >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT
      shell: pwsh
      
    - name: Create GitHub Release (x64 only)
      id: create_release
      if: matrix.architecture == 'win-x64'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        release_name: UIAutomationMCP v${{ steps.version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.NOTES }}
        draft: false
        prerelease: false
        
    - name: Get existing release (ARM64)
      id: get_release
      if: matrix.architecture == 'win-arm64'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: 'v${{ steps.version.outputs.VERSION }}'
          });
          return release.upload_url;
        result-encoding: string
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ matrix.architecture == 'win-x64' && steps.create_release.outputs.upload_url || steps.get_release.outputs.result }}
        asset_path: ${{ steps.archive.outputs.ARCHIVE_PATH }}
        asset_name: ${{ steps.archive.outputs.ARCHIVE_NAME }}
        asset_content_type: application/zip
        
    - name: Submit to Winget Community Repository (x64 only)
      if: matrix.architecture == 'win-x64'
      uses: vedantmgoyal2009/winget-releaser@v2
      with:
        identifier: Locomorange.UIAutomationMCP
        version: ${{ steps.version.outputs.VERSION }}
        installers-regex: '\.zip$'
        token: ${{ secrets.WINGET_TOKEN }}
        fork-user: ${{ secrets.WINGET_FORK_USER }}