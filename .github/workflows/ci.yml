name: CI

on:
  push:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
      - '.github/workflows/release.yml'
      - '.github/winget/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/workflows/release.yml'
      - '.github/winget/**'
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    name: Build ${{ matrix.architecture }}
    runs-on: windows-2025
    
    strategy:
      matrix:
        architecture: [win-x64, win-arm64]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: |
        dotnet build --configuration Release --no-restore --verbosity normal
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.architecture }}
        path: |
          **/bin/Release/**
          **/obj/Release/**
        retention-days: 1

  test:
    name: Run Tests
    runs-on: windows-2025
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-win-x64
        path: .
    
    - name: Run tests
      run: |
        dotnet test --configuration Release --no-build --verbosity detailed `
          --logger "trx;LogFileName=test-results.trx" `
          --logger "console;verbosity=detailed" `
          --collect:"XPlat Code Coverage" `
          --results-directory TestResults
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults/
        retention-days: 7
    


  code-quality:
    name: Code Quality Checks
    runs-on: windows-2025
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check code formatting
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true  # Don't fail the build for formatting issues
    
    - name: Build with warnings as errors
      run: |
        dotnet build --configuration Release --no-restore /warnaserror
      continue-on-error: true  # Report but don't fail
    
    - name: Check for vulnerable packages
      run: |
        dotnet list package --vulnerable --include-transitive
        $output = dotnet list package --vulnerable --include-transitive
        if ($output -match "has the following vulnerable packages") {
          Write-Warning "⚠️ Vulnerable packages detected. Please review and update."
        } else {
          Write-Host "✅ No vulnerable packages detected"
        }
      shell: pwsh